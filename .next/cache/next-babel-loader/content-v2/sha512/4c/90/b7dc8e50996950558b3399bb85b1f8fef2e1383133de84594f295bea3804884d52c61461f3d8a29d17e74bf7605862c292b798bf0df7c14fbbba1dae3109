{"ast":null,"code":"import _defineProperty from \"/Users/diegoborigen/Personal/Projects/code/new-inspir/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect, useRef } from 'react';\n\nconst useCustomForm = ({\n  initialValues,\n  fields,\n  onSubmit\n}) => {\n  _s();\n\n  const {\n    0: values,\n    1: setValues\n  } = useState(initialValues || {});\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: touched,\n    1: setTouched\n  } = useState({});\n  const formRendered = useRef(true);\n  useEffect(() => {\n    if (formRendered.current) {\n      setValues(initialValues);\n      setErrors({});\n      setTouched({});\n    }\n\n    formRendered.current = false;\n  }, [initialValues]);\n\n  const handleChange = (event, validations) => {\n    const {\n      target\n    } = event;\n    const {\n      name,\n      value\n    } = target;\n    event.persist();\n\n    if (touched && validations) {\n      validations.forEach(validation => setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n        [name]: validation(value)\n      })));\n    }\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: value\n    }));\n  };\n\n  const handleBlur = event => {\n    const {\n      target\n    } = event;\n    const {\n      name\n    } = target;\n    setTouched(_objectSpread(_objectSpread({}, touched), {}, {\n      [name]: true\n    }));\n  };\n\n  const handleSubmit = event => {\n    if (event) event.preventDefault();\n    let newErrors = {};\n    fields.forEach(field => {\n      if (field.validations) {\n        field.validations.forEach(validation => newErrors[field.name] = validation(values[field.name]));\n        setErrors(_objectSpread(_objectSpread({}, errors), newErrors));\n      }\n    });\n    Object.keys(newErrors).forEach(key => {\n      if (newErrors[key] === undefined) {\n        delete newErrors[key];\n      }\n    });\n\n    if (Object.keys(newErrors).length === 0) {\n      onSubmit(event.target);\n    }\n  };\n\n  return {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    setErrors,\n    setValues,\n    setTouched\n  };\n};\n\n_s(useCustomForm, \"Yt1dk6SqjMlgP8kgGK2+ooVeNYo=\");\n\nexport default useCustomForm;","map":{"version":3,"sources":["/Users/diegoborigen/Personal/Projects/code/new-inspir/components/common/myCustomForm/useContactForm.js"],"names":["useState","useEffect","useRef","useCustomForm","initialValues","fields","onSubmit","values","setValues","errors","setErrors","touched","setTouched","formRendered","current","handleChange","event","validations","target","name","value","persist","forEach","validation","handleBlur","handleSubmit","preventDefault","newErrors","field","Object","keys","key","undefined","length"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nconst useCustomForm = ({initialValues,fields, onSubmit}) => {\n    const [values, setValues] = useState(initialValues || {});\n    const [errors, setErrors] = useState({});\n    const [touched, setTouched] = useState({});\n    const formRendered = useRef(true);\n\n    useEffect(() => {\n        if (formRendered.current) {\n            setValues(initialValues);\n            setErrors({});\n            setTouched({});\n        }\n        formRendered.current = false;\n    }, [initialValues]);\n\n    const handleChange = (event, validations) => {\n        const { target } = event;\n        const { name, value } = target;\n\n        event.persist();\n\n        if (touched && validations) {\n            validations.forEach(validation => setErrors({...errors, [name]: validation(value)}));\n        }\n        setValues({ ...values, [name]: value });\n    };\n\n    const handleBlur = (event) => {\n        const { target } = event;\n        const { name } = target;\n\n        setTouched({ ...touched, [name]: true });\n    };\n\n    const handleSubmit = (event) => {\n        if (event) event.preventDefault();\n        let newErrors = {};\n\n        fields.forEach(field => {\n            if (field.validations) {\n                field.validations.forEach(validation => newErrors[field.name] = validation(values[field.name]));\n                setErrors({...errors, ...newErrors});\n            }\n        });\n        Object.keys(newErrors).forEach(key => {\n            if (newErrors[key] === undefined) {\n                delete newErrors[key];\n            }\n        });\n\n        if (Object.keys(newErrors).length === 0) {\n            onSubmit(event.target);\n        }\n    };\n\n    return {\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        setErrors,\n        setValues,\n        setTouched,\n    };\n};\n\nexport default useCustomForm;"]},"metadata":{},"sourceType":"module"}