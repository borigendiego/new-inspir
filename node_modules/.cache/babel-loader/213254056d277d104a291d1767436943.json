{"ast":null,"code":"var _jsxFileName = \"/Users/diegoborigen/Personal/Projects/newinspir/src/components/common/myCustomForm/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios'; //Hook\n\nimport useContactForm from './useContactForm'; //Component\n\nimport MyInput from './CustomInput'; //Styles\n\nimport './customForm.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyCustomForm = ({\n  fields,\n  onSuccessMessage,\n  onErrorMessage,\n  customClass,\n  submitButtonLabel\n}) => {\n  _s();\n\n  const [messageSent, setMessageSent] = useState('');\n  const initialValues = {\n    name: '',\n    customerEmail: '',\n    subject: '',\n    message: ''\n  };\n  const {\n    values,\n    handleChange,\n    errors,\n    handleSubmit,\n    setValues\n  } = useContactForm({\n    initialValues,\n    fields,\n    onSubmit: () => {\n      axios.post('https://thehippoapi.netlify.app/.netlify/functions/api/inspir-mail', {\n        subject: values.subject,\n        message: values.message,\n        name: values.name,\n        customerEmail: values.customerEmail\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'accept': 'application/json, text/plain, */*'\n        }\n      }).then(function (response) {\n        setValues(initialValues);\n        setMessageSent('succeed');\n      }).catch(function (error) {\n        console.log(\">>Error\", error);\n        setMessageSent('error');\n      });\n    }\n  });\n\n  const renderSentMessage = () => {\n    if (messageSent === 'succeed') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'message succeed',\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Thank you!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: onSuccessMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (messageSent === 'error') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'message error',\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Something went wrong\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: onErrorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 20\n      }, this);\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: `contact-form ${customClass}`,\n    onSubmit: event => handleSubmit(event),\n    children: [fields.map(field => {\n      const {\n        name,\n        type,\n        label,\n        validations,\n        selectOptions,\n        size\n      } = field;\n\n      switch (type) {\n        case 'text':\n          return /*#__PURE__*/_jsxDEV(MyInput, {\n            fieldName: name,\n            id: name,\n            fieldType: 'text',\n            label: label,\n            handleChange: handleChange,\n            value: values[name],\n            validations: validations,\n            errors: errors,\n            size: size\n          }, name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 30\n          }, this);\n\n        case 'textArea':\n          return /*#__PURE__*/_jsxDEV(\"section\", {\n            className: 'contact-item',\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: 'contact-label',\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 34\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: name,\n              id: name,\n              onChange: handleChange,\n              value: values[name],\n              rows: '5',\n              cols: '40',\n              className: 'contact-input-box',\n              placeholder: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 34\n            }, this)]\n          }, name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 30\n          }, this);\n\n        case 'select':\n          return /*#__PURE__*/_jsxDEV(\"select\", {\n            className: 'contact-select',\n            children: selectOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              children: option.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 66\n            }, this))\n          }, name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 30\n          }, this);\n\n        default:\n          return /*#__PURE__*/_jsxDEV(MyInput, {\n            fieldName: name,\n            id: name,\n            fieldType: 'text',\n            label: label,\n            handleChange: handleChange,\n            value: values[name],\n            validations: validations,\n            errors: errors\n          }, name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 26\n          }, this);\n      }\n    }), renderSentMessage(), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: 'contact-item',\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: 'submit',\n        value: submitButtonLabel ? submitButtonLabel : 'SEND',\n        className: 'contact-input-button'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MyCustomForm, \"yjAW0x9c7sQ/Ord0Ur8/JjomVgk=\", false, function () {\n  return [useContactForm];\n});\n\n_c = MyCustomForm;\nMyCustomForm.propTypes = {\n  fields: PropTypes.array,\n  onSuccessMessage: PropTypes.string,\n  onErrorMessage: PropTypes.string,\n  customClass: PropTypes.string,\n  submitButtonLabel: PropTypes.string\n};\nexport default MyCustomForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyCustomForm\");","map":{"version":3,"sources":["/Users/diegoborigen/Personal/Projects/newinspir/src/components/common/myCustomForm/index.js"],"names":["React","useState","PropTypes","axios","useContactForm","MyInput","MyCustomForm","fields","onSuccessMessage","onErrorMessage","customClass","submitButtonLabel","messageSent","setMessageSent","initialValues","name","customerEmail","subject","message","values","handleChange","errors","handleSubmit","setValues","onSubmit","post","headers","then","response","catch","error","console","log","renderSentMessage","event","map","field","type","label","validations","selectOptions","size","option","value","propTypes","array","string"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n//Hook\nimport useContactForm from './useContactForm';\n//Component\nimport MyInput from './CustomInput';\n//Styles\nimport './customForm.scss';\n\nconst MyCustomForm = ({ fields, onSuccessMessage, onErrorMessage, customClass, submitButtonLabel }) => {\n    const [messageSent, setMessageSent] = useState('');\n    const initialValues = {\n        name: '',\n        customerEmail: '',\n        subject: '',\n        message: '',\n    };\n\n    const {\n        values,\n        handleChange,\n        errors,\n        handleSubmit,\n        setValues,\n    } = useContactForm({\n        initialValues,\n        fields,\n        onSubmit: () => {\n            axios.post(\n                'https://thehippoapi.netlify.app/.netlify/functions/api/inspir-mail',\n                {\n                    subject: values.subject,\n                    message: values.message,\n                    name: values.name,\n                    customerEmail: values.customerEmail,\n                    },\n            {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'accept': 'application/json, text/plain, */*',\n                    },\n                }\n                )\n                .then(function (response) {\n                    setValues(initialValues);\n                    setMessageSent('succeed');\n                })\n                .catch(function (error) {\n                    console.log(\">>Error\", error);\n                    setMessageSent('error');\n                });\n        }\n    });\n\n    const renderSentMessage = () => {\n        if (messageSent === 'succeed') {\n            return <div className={'message succeed'}>\n                <h2>Thank you!</h2>\n                <p>{onSuccessMessage}</p>\n            </div>\n        }\n        if (messageSent === 'error') {\n            return <div className={'message error'}>\n                <h2>Something went wrong</h2>\n                <p>{onErrorMessage}</p>\n            </div>\n        }\n        return null;\n    };\n\n    return (\n        <form className={`contact-form ${customClass}`} onSubmit={(event) => handleSubmit(event)}>\n            {\n             fields.map((field) => {\n                 const { name, type, label, validations, selectOptions, size } = field;\n\n                 switch (type) {\n                     case 'text':\n                         return (\n                             <MyInput\n                                 key={name}\n                                 fieldName={name}\n                                 id={name}\n                                 fieldType={'text'}\n                                 label={label}\n                                 handleChange={handleChange}\n                                 value={values[name]}\n                                 validations={validations}\n                                 errors={errors}\n                                 size={size}\n                             />\n                         );\n                     case 'textArea':\n                         return (\n                             <section className={'contact-item'} key={name}>\n                                 <label className={'contact-label'}>{label}</label>\n                                 <textarea\n                                     name={name}\n                                     id={name}\n                                     onChange={handleChange}\n                                     value={values[name]}\n                                     rows={'5'}\n                                     cols={'40'}\n                                     className={'contact-input-box'}\n                                     placeholder={name}\n                                 />\n                             </section>\n                         );\n                     case 'select':\n                         return (\n                             <select key={name} className={'contact-select'}>\n                                 {\n                                     selectOptions.map(option => <option value={option.value}>{option.label}</option>)\n                                 }\n                             </select>\n                         );\n                     default:\n                         return (\n                         <MyInput\n                             key={name}\n                             fieldName={name}\n                             id={name}\n                             fieldType={'text'}\n                             label={label}\n                             handleChange={handleChange}\n                             value={values[name]}\n                             validations={validations}\n                             errors={errors}\n                         />\n                     )\n                 }\n             })\n            }\n            {renderSentMessage()}\n            <section className={'contact-item'}>\n                <input type={'submit'} value={submitButtonLabel ? submitButtonLabel : 'SEND'} className={'contact-input-button'}/>\n            </section>\n        </form>\n    )\n};\n\nMyCustomForm.propTypes = {\n    fields: PropTypes.array,\n    onSuccessMessage: PropTypes.string,\n    onErrorMessage: PropTypes.string,\n    customClass: PropTypes.string,\n    submitButtonLabel: PropTypes.string,\n};\n\nexport default MyCustomForm"]},"metadata":{},"sourceType":"module"}